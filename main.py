import asyncio
import random
import threading
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from aiogram.types import FSInputFile

import datetime
import json
import os
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.jobstores.base import JobLookupError
from apscheduler.schedulers.base import STATE_RUNNING
from apscheduler.triggers.cron import CronTrigger
import pytz
import requests
from bs4 import BeautifulSoup
import aiohttp

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
logging.basicConfig(
    filename='bot.log',
    level=logging.DEBUG,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---
ADMIN_ID = 409183653  # <-- —Ç–µ–ø–µ—Ä—å —Ç–æ–ª—å–∫–æ admin
TARGET_USER_ID = 791353019  # <-- ID –ø–æ–ª—É—á–∞—Ç–µ–ª—è –¥–ª—è send_* –∫–æ–º–∞–Ω–¥

API_TOKEN = '7818869168:AAGmcVSu7NliSSoNiBLoe2ARzVLCYgbpgRI'

WATER_REMINDER_INTERVAL = 1800  # 30 minutes
TABLETS_REMINDER_INTERVAL = 600  # 10 minutes
MOOD_SCALE_MIN = 1
MOOD_SCALE_MAX = 5
BUFFER_SIZE = 1  # –ù–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è –∑–∞–ø–∏—Å—å –∫–∞–∂–¥–æ–π –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª

bot = Bot(token=API_TOKEN)
dp = Dispatcher()
scheduler = AsyncIOScheduler()

STATE_FILE = 'mood_log.json'

if not os.path.exists(STATE_FILE):
    with open(STATE_FILE, 'w') as f:
        json.dump([], f)

mood_fields = [
    ('mood', '–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ'),
    ('anxiety', '–¢—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç—å'),
    ('energy', '–≠–Ω–µ—Ä–≥–∏—è'),
    ('focus', '–§–æ–∫—É—Å'),
    ('reactivity', '–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å')
]

random_tips = [
    "üíß –ù–µ –∑–∞–±—É–¥—å –ø–∏—Ç—å –≤–æ–¥—É. –ú–æ–∑–≥ –∏ —Å–µ—Ä–¥—Ü–µ —Å–∫–∞–∂—É—Ç —Å–ø–∞—Å–∏–±–æ.",
    "ü•ó –°—ä–µ—à—å —á—Ç–æ-–Ω–∏–±—É–¥—å —Ç—ë–ø–ª–æ–µ –∏ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ. –ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π –ø—Ä–∏—ë–º –ø–∏—â–∏ = —Å–∞–º–æ–ø–æ–¥–¥–µ—Ä–∂–∫–∞.",
    "üçé –ü–µ—Ä–µ–∫—É—Å ‚Äî —ç—Ç–æ —Ç–æ–∂–µ –∑–∞–±–æ—Ç–∞. –ù–µ –ø—Ä–æ–ø—É—Å–∫–∞–π, –µ—Å–ª–∏ —á—É–≤—Å—Ç–≤—É–µ—à—å —É–ø–∞–¥–æ–∫.",
    "üí¶ –ì–∏–¥—Ä–∞—Ç–∞—Ü–∏—è –≤–∞–∂–Ω–µ–µ, —á–µ–º –∫–∞–∂–µ—Ç—Å—è. –ü—Ä–æ—Å—Ç–æ –≤—ã–ø–µ–π —Å—Ç–∞–∫–∞–Ω –≤–æ–¥—ã.",
    "üßÉ –§—Ä—É–∫—Ç—ã, –æ–≤–æ—â–∏, —Ç—ë–ø–ª–∞—è –µ–¥–∞ ‚Äî –≤—Å—ë —ç—Ç–æ –Ω–µ –±–∞–Ω–∞–ª—å–Ω–æ. –≠—Ç–æ —Ç–æ–ø–ª–∏–≤–æ –¥–ª—è —Ç–≤–æ–µ–≥–æ —Ç–µ–ª–∞.",
    "–¢—ã –Ω–µ —Å–ª–æ–º–∞–Ω–∞ ‚Äî —Ç—ã —É—Å—Ç–∞–ª–∞. –ò —ç—Ç–æ –Ω–µ –æ–¥–Ω–æ –∏ —Ç–æ –∂–µ.",
    "–ü–∏—Ç—å –º–∞–≥–Ω–∏–π ‚Äî —ç—Ç–æ –Ω–µ —Å–ª–∞–±–æ—Å—Ç—å, —ç—Ç–æ –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç—å.",
    "–°–µ–≥–æ–¥–Ω—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–∂–∏—Ç—å –¥–µ–Ω—å, –Ω–µ –≤—ã–∏–≥—Ä—ã–≤–∞—Ç—å –µ–≥–æ.",
    "–ú–æ–∑–≥—É —Å–µ–π—á–∞—Å –Ω–µ –Ω—É–∂–Ω–∞ –ø–æ–±–µ–¥–∞. –ú–æ–∑–≥—É –Ω—É–∂–Ω–æ —Ç–µ–ø–ª–æ –∏ –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ—Å—Ç—å.",
    "–ö–æ–≥–¥–∞ —Ç—Ä–µ–≤–æ–≥–∞ ‚Äî –Ω–µ —Ç—Ä–µ–±—É–π –æ—Ç —Å–µ–±—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏. –¢—Ä–µ–±—É–π –º—è–≥–∫–æ—Å—Ç–∏.",
    "–ï—Å–ª–∏ —Å—Ç–∞–ª–æ —Ç—è–∂–µ–ª–æ ‚Äî –Ω–µ —É—Å–∫–æ—Ä—è–π—Å—è, –∞ –∑–∞–º–µ–¥–ª–∏—Å—å.",
    "–¢–≤–æ—è —Ü–µ–Ω–Ω–æ—Å—Ç—å –Ω–µ —É–º–µ–Ω—å—à–∞–µ—Ç—Å—è, –∫–æ–≥–¥–∞ —Ç—ã —É—Å—Ç–∞—ë—à—å.",
    "–ò–Ω–æ–≥–¥–∞ –ª—É—á—à–∏–π –≤—ã–±–æ—Ä ‚Äî —ç—Ç–æ –Ω–µ –¥–µ–ª–∞—Ç—å –Ω–∏—á–µ–≥–æ.",
    "–ù–µ –Ω—É–∂–Ω–æ –±—ã—Ç—å –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–π. –ù—É–∂–Ω–æ –±—ã—Ç—å –∂–∏–≤–æ–π.",
    "–ì—Ä—É—Å—Ç—å ‚Äî —ç—Ç–æ –Ω–µ –æ—à–∏–±–∫–∞. –≠—Ç–æ –ø—Ä–æ—Å—Ç–æ —á–∞—Å—Ç—å —Å–ø–µ–∫—Ç—Ä–∞.",
    "–¢—ã –Ω–µ –æ–±—è–∑–∞–Ω–∞ –±—ã—Ç—å —Å—Ç–∞–±–∏–ª—å–Ω–æ–π, —á—Ç–æ–±—ã –±—ã—Ç—å –¥–æ—Å—Ç–æ–π–Ω–æ–π –ª—é–±–≤–∏.",
    "–ö–æ–≥–¥–∞ –≤—Å—ë —Ä–∞–∑–¥—Ä–∞–∂–∞–µ—Ç ‚Äî —ç—Ç–æ –Ω–µ —Ç—ã –ø–ª–æ—Ö–∞—è. –≠—Ç–æ –ø–µ—Ä–µ–≥—Ä—É–∑.",
    "–¢—ã –Ω–µ –æ–±—è–∑–∞–Ω–∞ –æ–±—ä—è—Å–Ω—è—Ç—å, –ø–æ—á–µ–º—É —Ç–µ–±–µ –ø–ª–æ—Ö–æ.",
    "–¢–µ–ª–æ ‚Äî –Ω–µ –≤—Ä–∞–≥. –û–Ω–æ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ—Å–∏—Ç –≤–Ω–∏–º–∞–Ω–∏—è.",
    "–¢—ã –Ω–µ –æ–±—è–∑–∞–Ω–∞ —Å–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –æ–¥–Ω–∞.",
    "–†–∞–∑–¥—Ä–∞–∂–µ–Ω–∏–µ ‚Äî —ç—Ç–æ —Ç–æ–∂–µ —Å–∏–≥–Ω–∞–ª. –ï–≥–æ –º–æ–∂–Ω–æ —É–≤–∞–∂–∞—Ç—å.",
    "–ù–∏–∫–∞–∫–æ–π —Ç—ã –Ω–µ –ª–µ–Ω–∏–≤–∞—è. –ü—Ä–æ—Å—Ç–æ —Ä–µ—Å—É—Ä—Å–∞ –º–∞–ª–æ.",
    "–ù–µ –≤–µ—Å—å –¥–µ–Ω—å –Ω–∞–¥–æ –±—ã—Ç—å –≤ –ø–æ—Ä—è–¥–∫–µ. –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ–¥–Ω–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞.",
    "–¢–≤–æ—è –º–µ–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å ‚Äî —ç—Ç–æ —Å–ø–æ—Å–æ–± —Å–µ–±—è —Å–ø–∞—Å—Ç–∏.",
    "–¢—ã –Ω–µ –æ–±—è–∑–∞–Ω–∞ –±—ã—Ç—å —Å–∏–ª—å–Ω–æ–π –∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ.",
    "–ö–∞–∂–¥–æ–µ —Ç–≤–æ—ë —Å–æ—Å—Ç–æ—è–Ω–∏–µ ‚Äî –≤–∞–ª–∏–¥–Ω–æ. –î–∞–∂–µ –∫–æ–≥–¥–∞ –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ, –ø–æ—á–µ–º—É –æ–Ω–æ —Ç–∞–∫–æ–µ.",
    "–¢—ã ‚Äî –Ω–µ –¥–∏–∞–≥–Ω–æ–∑. –¢—ã ‚Äî —á–µ–ª–æ–≤–µ–∫, –∫–æ—Ç–æ—Ä—ã–π —Å–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è.",
    "–£—Å—Ç–∞–ª–æ—Å—Ç—å ‚Äî —ç—Ç–æ –Ω–µ –ª–µ–Ω—å, –∞ —Å–∏–º–ø—Ç–æ–º.",
    "–î–∞–∂–µ –º–µ–¥–ª–µ–Ω–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å ‚Äî —ç—Ç–æ –ø—Ä–æ–≥—Ä–µ—Å—Å.",
    "–ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ—à—å ‚Äî –∑–Ω–∞—á–∏—Ç, —É–∂–µ –Ω–∞ –ø—Ä–µ–¥–µ–ª–µ. –≠—Ç–æ —Ç–æ–∂–µ —Å–∏–≥–Ω–∞–ª.",
    "–ú–æ–∂–Ω–æ –Ω–µ —Ö–æ—Ç–µ—Ç—å. –ú–æ–∂–Ω–æ –Ω–∏—á–µ–≥–æ –Ω–µ —Ö–æ—Ç–µ—Ç—å. –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ.",
    "–ù–∏–∫—Ç–æ –Ω–µ –æ–±—è–∑–∞–Ω –ø–æ–Ω–∏–º–∞—Ç—å. –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, —á—Ç–æ —Ç—ã –∑–Ω–∞–µ—à—å, –∫–∞–∫ —Ç–µ–±–µ.",
    "–¢—ã –Ω–µ –¥–æ–ª–∂–Ω–∞ –æ–ø—Ä–∞–≤–¥—ã–≤–∞—Ç—å—Å—è –∑–∞ —Å–≤–æ—ë —Å–æ—Å—Ç–æ—è–Ω–∏–µ.",
    "–ò–Ω–æ–≥–¥–∞ —Å–∞–º–æ–µ –º—É–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ ‚Äî –ø—Ä–∏–∑–Ω–∞—Ç—å, —á—Ç–æ —Ç—ã —É—Å—Ç–∞–ª–∞.",
    "–¢—ã –Ω–µ –æ–¥–Ω–∞. –ò –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –±—ã–ª–∞.",
    "–ï—Å–ª–∏ —Ö–æ—á–µ—Ç—Å—è –ø–ª–∞–∫–∞—Ç—å ‚Äî –ø–ª–∞—á—å. –≠—Ç–æ –æ—á–∏—Å—Ç–∫–∞, –Ω–µ —Å–ª–∞–±–æ—Å—Ç—å.",
    "–ù–∏–∫–æ–º—É –Ω–µ —Å—Ç–∞–Ω–µ—Ç –ª–µ–≥—á–µ, –µ—Å–ª–∏ —Ç–µ–±–µ —Å—Ç–∞–Ω–µ—Ç —Ö—É–∂–µ. –ó–∞–±–æ—Ç—å—Å—è –æ —Å–µ–±–µ.",
    "–ö–æ–≥–¥–∞ —Ç—ã –∑–∞–±–æ—Ç–∏—à—å—Å—è –æ —Å–µ–±–µ ‚Äî —Ç—ã —É–∂–µ –Ω–µ –≤ –ø—Ä–æ–∏–≥—Ä—ã—à–µ.",
    "–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å ‚Äî —ç—Ç–æ –Ω–µ –æ–¥–Ω–æ –∏ —Ç–æ –∂–µ, —á—Ç–æ –±–µ–∑—ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å.",
    "–ï—Å–ª–∏ —Ç—ã –≤—Å—Ç–∞–ª–∞ —Å –∫—Ä–æ–≤–∞—Ç–∏ ‚Äî —ç—Ç–æ —É–∂–µ –ø–æ–±–µ–¥–∞.",
    "–ù–µ –≤—Å–µ –¥–Ω–∏ —è—Ä–∫–∏–µ. –ù–æ –≤—Å–µ –¥–Ω–∏ –≤–∞–∂–Ω—ã–µ.",
    "–¢—ã ‚Äî –Ω–µ —Å—É–º–º–∞ —Å–≤–æ–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Å–æ–≤.",
    "–¢—Ä–µ–≤–æ–≥–∞ –≥–æ–≤–æ—Ä–∏—Ç —Å —Ç–æ–±–æ–π, –Ω–æ —ç—Ç–æ –Ω–µ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ –æ–Ω–∞ –ø—Ä–∞–≤–∞.",
    "–¢—ã –º–æ–∂–µ—à—å –¥–æ–≤–µ—Ä—è—Ç—å —Å–µ–±–µ. –î–∞–∂–µ –µ—Å–ª–∏ –∫–∞–∂–µ—Ç—Å—è, —á—Ç–æ –Ω–µ –º–æ–∂–µ—à—å.",
    "–ü–æ–∫–æ–π ‚Äî –Ω–µ –≤—Ä–∞–≥, –∞ —Ü–µ–ª—å.",
    "–û–¥–∏–Ω –¥–µ–Ω—å –±–µ–∑ —Å–ª—ë–∑ ‚Äî —É–∂–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ. –ù–µ –æ–±–µ—Å—Ü–µ–Ω–∏–≤–∞–π.",
    "–î–∞–∂–µ –µ—Å–ª–∏ –º–∏—Ä —à—É–º–∏—Ç ‚Äî —Ç—ã –º–æ–∂–µ—à—å –±—ã—Ç—å —Ç–∏—Ö–∏–º –æ—Å—Ç—Ä–æ–≤–æ–º.",
    "–¢—ã ‚Äî –Ω–µ –ø—Ä–æ–±–ª–µ–º–∞, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å.",
    "–ò–Ω–æ–≥–¥–∞ –ø—Ä–æ—Å—Ç–æ –¥—ã—Ö–∞–Ω–∏–µ ‚Äî —É–∂–µ –∞–∫—Ç —Å–∏–ª—ã.",
    "–¢—ã –∏–º–µ–µ—à—å –ø—Ä–∞–≤–æ –∑–∞–º–µ–¥–ª–∏—Ç—å—Å—è. –ú–∏—Ä –ø–æ–¥–æ–∂–¥—ë—Ç.",
    "–ù–∏–∫—Ç–æ –Ω–µ –∑–Ω–∞–µ—Ç, –∫–∞–∫ –±—ã—Ç—å —Å–æ–±–æ–π. –í—Å–µ —É—á–∞—Ç—Å—è. –¢—ã ‚Äî —Ç–æ–∂–µ.",
    "–¢—ã –Ω–µ –æ–±—è–∑–∞–Ω–∞ –±—ã—Ç—å —Å–∏–ª—å–Ω–æ–π —Ä–∞–¥–∏ –∫–æ–≥–æ-—Ç–æ. –¢–æ–ª—å–∫–æ —Ä–∞–¥–∏ —Å–µ–±—è.",
    "–ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ—à—å –¥—É–º–∞—Ç—å ‚Äî —á—É–≤—Å—Ç–≤—É–π. –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ—à—å —á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å ‚Äî –¥—ã—à–∏.",
    "–ù–µ—Ç –ø–ª–æ—Ö–∏—Ö —á—É–≤—Å—Ç–≤. –ï—Å—Ç—å –Ω–µ—É—Å–ª—ã—à–∞–Ω–Ω—ã–µ.",
    "–¢—ã ‚Äî —Ü–µ–ª–∞—è, –¥–∞–∂–µ –≤ —Ä–∞–∑–±–∏—Ç–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏.",
    "–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –æ–¥–Ω–æ–≥–æ –¥–æ–±—Ä–æ–≥–æ –∂–µ—Å—Ç–∞ –∫ —Å–µ–±–µ.",
    "–ù–∏–∫—Ç–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–¥–µ–∞–ª—å–Ω—ã–º. –î–∞–∂–µ —Ç—ã.",
    "–ü–æ–∑–∞–±–æ—Ç—å—Å—è –æ —Å–µ–±–µ —Ç–∞–∫, –∫–∞–∫ –∑–∞–±–æ—Ç–∏–ª–∞—Å—å –±—ã –æ –ø–æ–¥—Ä—É–≥–µ.",
    "–ò–Ω–æ–≥–¥–∞ –ª—É—á—à–∏–π –ø–ª–∞–Ω ‚Äî –Ω–∏–∫–∞–∫–æ–≥–æ –ø–ª–∞–Ω–∞.",
    "–¢—ã –Ω–µ –ø–æ—Ç–µ—Ä—è–Ω–∞. –¢—ã ‚Äî –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ.",
    "–ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ—à—å —Å–ø—Ä–∞–≤–∏—Ç—å—Å—è ‚Äî –ø–æ–ø—Ä–æ—Å–∏ –ø–æ–º–æ—â–∏. –≠—Ç–æ —Å–º–µ–ª–æ.",
    "–¢—ã –∑–∞—Å–ª—É–∂–∏–≤–∞–µ—à—å –±—ã—Ç—å –≤ –ø–æ–∫–æ–µ. –ü—Ä–æ—Å—Ç–æ –ø–æ—Ç–æ–º—É —á—Ç–æ —Ç—ã –µ—Å—Ç—å.",
    "–í—Å—ë, —á—Ç–æ —Ç—ã —á—É–≤—Å—Ç–≤—É–µ—à—å ‚Äî –¥–æ–ø—É—Å—Ç–∏–º–æ.",
    "–ö–æ–≥–¥–∞ —Ç—Ä—É–¥–Ω–æ ‚Äî –Ω–µ —Ä–µ—à–∞–π, –ø—Ä–æ—Å—Ç–æ –≤—ã–∂–∏–≤–∏.",
    "–¢—ã ‚Äî –Ω–µ —Ü–∏—Ñ—Ä—ã. –¢—ã ‚Äî –æ–ø—ã—Ç –∏ —Ç–µ–ø–ª–æ.",
    "–¢–≤–æ—è –∏—Å—Ç–æ—Ä–∏—è –≤–∞–∂–Ω–∞. –î–∞–∂–µ –µ—Å–ª–∏ –æ–Ω–∞ —Ç–∏—Ö–∞—è.",
    "–ë—É–¥—å –∫ —Å–µ–±–µ –º—è–≥–∫–æ–π. –û—Å–æ–±–µ–Ω–Ω–æ –∫–æ–≥–¥–∞ —Ç—è–∂–µ–ª–æ.",
    "–¢—ã –∑–∞—Å–ª—É–∂–∏–≤–∞–µ—à—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è, –∞ –Ω–µ —Ç–æ–ª—å–∫–æ –≤—ã–∂–∏–≤–∞–Ω–∏—è.",
    "–ò–Ω–æ–≥–¥–∞ –ø—Ä–æ—Å—Ç–æ –ø–æ–µ—Å—Ç—å –∏ –ª–µ—á—å ‚Äî —ç—Ç–æ —Ñ–æ—Ä–º–∞ –∑–∞–±–æ—Ç—ã.",
    "–î–µ–Ω—å –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–∑–Ω—ã–º. –¢—ã –Ω–µ –æ–±—è–∑–∞–Ω–∞ –±—ã—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤–æ–π.",
    "–î–∞–∂–µ —à–∞–≥ –Ω–∞–∑–∞–¥ ‚Äî –º–æ–∂–µ—Ç –±—ã—Ç—å —à–∞–≥–æ–º –∫ —Å–µ–±–µ.",
    "–ï—Å–ª–∏ —Ç—Ä–µ–≤–æ–∂–Ω–æ ‚Äî –∑–∞–∑–µ–º–ª–∏—Å—å: –¥—ã—à–∏, –ø–æ—á—É–≤—Å—Ç–≤—É–π —Ç–µ–ª–æ.",
    "–¢—ã –∏–º–µ–µ—à—å –ø—Ä–∞–≤–æ –Ω–∞ —Ç–∏—à–∏–Ω—É –∏ –æ–¥–∏–Ω–æ—á–µ—Å—Ç–≤–æ.",
    "–î–∞–∂–µ –∑–ª–æ—Å—Ç—å ‚Äî —ç—Ç–æ —Å–ø–æ—Å–æ–± —Ç–≤–æ–µ–≥–æ —Ç–µ–ª–∞ –ø—Ä–æ—Å–∏—Ç—å –∑–∞—â–∏—Ç—ã.",
    "–¢—ã —É–∂–µ –º–Ω–æ–≥–æ–µ –ø–µ—Ä–µ–∂–∏–ª–∞. –≠—Ç–æ –æ —á—ë–º-—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç.",
    "–ö–∞–∂–¥—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ –≤ —Å—Ç—Ä–∞–¥–∞–Ω–∏–∏ ‚Äî —É–∂–µ –ª–µ—á–µ–Ω–∏–µ.",
    "–¢—ã –Ω–µ –æ–±—è–∑–∞–Ω–∞ –±—ã—Ç—å —É–¥–æ–±–Ω–æ–π. –¢—ã –æ–±—è–∑–∞–Ω–∞ –±—ã—Ç—å —Å–æ–±–æ–π.",
    "–¢–≤–æ—è —Ü–µ–Ω–Ω–æ—Å—Ç—å –Ω–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.",
    "–ù–æ—Ä–º–∞–ª—å–Ω–æ –Ω–µ –±—ã—Ç—å –æ–∫. –û—Å–æ–±–µ–Ω–Ω–æ —Å–µ–π—á–∞—Å.",
    "–¢—ã –Ω–µ –Ω–µ–≤–∏–¥–∏–º–∫–∞. –¢–≤–æ—è –±–æ–ª—å –≤–∏–¥–Ω–∞.",
    "–¢—ã –Ω–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ–±—ä—è—Å–Ω–∏–º–æ–π, —á—Ç–æ–±—ã –±—ã—Ç—å –ø—Ä–∏–Ω—è—Ç–æ–π.",
    "–¢—ã –Ω–µ —Å–ª–æ–º–∞–Ω–∞. –ü—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω–∞.",
    "–°–ª–µ–∑—ã ‚Äî —ç—Ç–æ —Ç–æ–∂–µ —Ç–µ—Ä–∞–ø–∏—è.",
    "–¢—ã –∏–º–µ–µ—à—å –ø—Ä–∞–≤–æ –±—ã—Ç—å –≤–∞–∂–Ω–æ–π –¥–ª—è —Å–µ–±—è.",
    "–ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–º–æ–≥–∞–µ—Ç ‚Äî –ø—Ä–æ—Å—Ç–æ –ø–æ—Å–∏–¥–∏. –¢—ã –≤—Å—ë —Ä–∞–≤–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—à—å.",
    "–î–∞–∂–µ –º–æ–ª—á–∞–Ω–∏–µ ‚Äî —ç—Ç–æ —Ñ–æ—Ä–º–∞ –æ–±—â–µ–Ω–∏—è —Å —Å–æ–±–æ–π.",
    "–ï—Å–ª–∏ –Ω–µ —Å–ø—Ä–∞–≤–ª—è–µ—à—å—Å—è ‚Äî —ç—Ç–æ –Ω–µ –ø—Ä–æ —Å–ª–∞–±–æ—Å—Ç—å. –≠—Ç–æ –ø—Ä–æ –ø—Ä–µ–¥–µ–ª.",
    "–¢—ã –¥–æ—Å—Ç–æ–π–Ω–∞ –∑–∞–±–æ—Ç—ã –Ω–µ –ø–æ—Ç–æ–º—É, —á—Ç–æ –ø–æ–ª–µ–∑–Ω–∞, –∞ –ø–æ—Ç–æ–º—É —á—Ç–æ –µ—Å—Ç—å.",
    "–ù–∏–∫—Ç–æ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –æ—Ç —Ç–µ–±—è –±—ã—Ç—å —Å—Ç–∞–ª—å–Ω–æ–π. –î–∞–∂–µ —Ç—ã.",
    "–¢—ã –º–æ–∂–µ—à—å –±—ã—Ç—å –º—è–≥–∫–æ–π –∏ —Å–∏–ª—å–Ω–æ–π –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ.",
    "–ï—Å–ª–∏ –≤—Å—ë —Ä—É—à–∏—Ç—Å—è ‚Äî —É–∫—Ä–æ–π—Å—è, –∞ –Ω–µ —Å—Ç—Ä–æ–π –∑–∞–Ω–æ–≤–æ.",
    "–¢—ã –≤–∞–∂–Ω–∞. –î–∞–∂–µ –µ—Å–ª–∏ —Å–µ–π—á–∞—Å –Ω–µ —á—É–≤—Å—Ç–≤—É–µ—à—å —ç—Ç–æ–≥–æ.",
    "–ú–æ–∂–Ω–æ –ø–µ—Ä–µ—Å—Ç–∞—Ç—å –¥–µ–ª–∞—Ç—å. –ò –ø—Ä–æ—Å—Ç–æ –±—ã—Ç—å.",
    "–ö–∞–∂–¥—ã–π —Ä–∞–∑, –∫–æ–≥–¥–∞ —Ç—ã –≤—ã–±–∏—Ä–∞–µ—à—å –Ω–µ —Å–¥–∞—Ç—å—Å—è ‚Äî —ç—Ç–æ –≤–∞–∂–Ω–æ.",
    "–¢—ã ‚Äî –Ω–µ –¥–∏–∞–≥–Ω–æ–∑. –¢—ã ‚Äî –∂–∏–≤–æ–π —á–µ–ª–æ–≤–µ–∫.",
    "–ï—Å–ª–∏ –Ω–µ–±–æ —Å–µ—Ä–æ–µ ‚Äî —ç—Ç–æ –Ω–µ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ —Å–æ–ª–Ω—Ü–µ –∏—Å—á–µ–∑–ª–æ.",
    "–¢—ã –º–æ–∂–µ—à—å –æ—à–∏–±–∞—Ç—å—Å—è ‚Äî –∏ –≤—Å—ë —Ä–∞–≤–Ω–æ –±—ã—Ç—å –¥–æ—Å—Ç–æ–π–Ω–æ–π.",
    "–¢—ã –¥–æ—Å—Ç–æ–π–Ω–∞ –ª—é–±–≤–∏. –î–∞–∂–µ –≤ —Å–∞–º—ã–π —Å–ª–æ–º–∞–Ω–Ω—ã–π –¥–µ–Ω—å.",
    "–£—Å—Ç–∞–ª–æ—Å—Ç—å ‚Äî —Å–∏–≥–Ω–∞–ª. –ù–µ –∏–≥–Ω–æ—Ä–∏—Ä—É–π –µ—ë.",
    "–¢—ã –º–æ–∂–µ—à—å –±—ã—Ç—å –¥–æ–±—Ä–æ–π –∫ —Å–µ–±–µ. –ü—Ä—è–º–æ —Å–µ–π—á–∞—Å.",
    "–ï—Å–ª–∏ —Ç–µ–±–µ —Ç—è–∂–µ–ª–æ ‚Äî —ç—Ç–æ –Ω–µ –ø–æ—Ç–æ–º—É —á—Ç–æ —Ç—ã —Å–ª–∞–±–∞. –ê –ø–æ—Ç–æ–º—É —á—Ç–æ –≥—Ä—É–∑ —Ç—è–∂—ë–ª—ã–π.",
    "–ù–∏—á–µ–≥–æ —Å—Ç—Ä–∞—à–Ω–æ–≥–æ, –µ—Å–ª–∏ —Ç—ã –Ω–µ –≥–æ—Ç–æ–≤–∞. –í—Å—ë –ø—Ä–∏—Ö–æ–¥–∏—Ç –ø–æ—ç—Ç–∞–ø–Ω–æ.",
    "–î–∞–∂–µ –±–µ–∑ –º–æ—Ç–∏–≤–∞—Ü–∏–∏ ‚Äî —Ç—ã –∏–º–µ–µ—à—å –∑–Ω–∞—á–µ–Ω–∏–µ.",
    "–ò–Ω–æ–≥–¥–∞ –ª—É—á—à–µ–µ, —á—Ç–æ —Ç—ã –º–æ–∂–µ—à—å —Å–¥–µ–ª–∞—Ç—å ‚Äî —ç—Ç–æ –Ω–µ –¥–µ–ª–∞—Ç—å.",
    "–ù–µ –≤–∏–Ω–∏—Ç—å —Å–µ–±—è ‚Äî —ç—Ç–æ —É–∂–µ —à–∞–≥ –∫ —Å–µ–±–µ.",
    "–¢—ã ‚Äî –Ω–µ –ø—Ä–æ–±–ª–µ–º–∞. –¢—ã ‚Äî –ø—Ä–æ—Ü–µ—Å—Å.",
    "üö∂ –ü—Ä–æ–≥—É–ª—è–π—Å—è —Ö–æ—Ç—è –±—ã 10 –º–∏–Ω—É—Ç. –î–∞–∂–µ –µ—Å–ª–∏ –Ω–µ —Ö–æ—á–µ—Ç—Å—è ‚Äî —ç—Ç–æ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç.",
    "üßò –°–¥–µ–ª–∞–π 5 –≥–ª—É–±–æ–∫–∏—Ö –≤–¥–æ—Ö–æ–≤ –∏ –≤—ã–¥–æ—Ö–æ–≤. –≠—Ç–æ –æ–±–Ω—É–ª–∏—Ç –Ω–µ—Ä–≤–Ω—É—é —Å–∏—Å—Ç–µ–º—É.",
    "üõèÔ∏è –ï—Å–ª–∏ —á—É–≤—Å—Ç–≤—É–µ—à—å –ø–µ—Ä–µ–≥—Ä—É–∑ ‚Äî –ø—Ä–æ—Å—Ç–æ –ø–æ–ª–µ–∂–∏ —Å –∑–∞–∫—Ä—ã—Ç—ã–º–∏ –≥–ª–∞–∑–∞–º–∏ 10 –º–∏–Ω—É—Ç.",
    "üéß –í–∫–ª—é—á–∏ –º—É–∑—ã–∫—É, –∫–æ—Ç–æ—Ä–∞—è —Ç–µ–±—è —Å–æ–±–∏—Ä–∞–µ—Ç. –î–∞–∂–µ –æ–¥–Ω–∞ –ø–µ—Å–Ω—è –º–æ–∂–µ—Ç —Å–º–µ–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ.",
    "üì¥ –£–±–µ—Ä–∏ —Ç–µ–ª–µ—Ñ–æ–Ω —Ö–æ—Ç—è –±—ã –Ω–∞ –ø–æ–ª—á–∞—Å–∞. –ú–æ–∑–≥ –æ—Ç–¥–æ—Ö–Ω—ë—Ç –æ—Ç —à—É–º–∞.",
    "üí§ –ù–µ –∑–∞–ª–∏–ø–∞–π ‚Äî –ø–æ–ø—Ä–æ–±—É–π –ª–µ—á—å —Å–ø–∞—Ç—å —á—É—Ç—å —Ä–∞–Ω—å—à–µ —Å–µ–≥–æ–¥–Ω—è.",
    "üìì –ó–∞–ø–∏—à–∏ –≤—Å—ë, —á—Ç–æ —Ç–µ–±—è –≥—Ä—É–∑–∏—Ç. –ú–æ–∑–≥ –Ω–µ –ª—é–±–∏—Ç —Ç–∞—Å–∫–∞—Ç—å —ç—Ç–æ –≤–Ω—É—Ç—Ä–∏.",
    "üïØÔ∏è –£—Å—Ç—Ä–æ–π —Å–µ–±–µ –º–∏–∫—Ä–æ—Ä–∏—Ç—É–∞–ª: —á–∞–π, —Ç–∏—à–∏–Ω–∞, –æ–¥–µ—è–ª–æ, –∑–∞–ø–∞—Ö ‚Äî —á—Ç–æ —É–≥–æ–¥–Ω–æ, —á—Ç–æ –¥–∞—ë—Ç –ø–æ–∫–æ–π.",
    "üí° –ü–æ–º–µ–Ω—è–π –æ–±—Å—Ç–∞–Ω–æ–≤–∫—É —Ö–æ—Ç—è –±—ã –Ω–∞ 10 –º–∏–Ω—É—Ç ‚Äî –¥—Ä—É–≥–∞—è –∫–æ–º–Ω–∞—Ç–∞, –æ–∫–Ω–æ, –±–∞–ª–∫–æ–Ω.",
    "üåû –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ–ª–Ω—Ü–µ ‚Äî –ø–æ—Å—Ç–æ–π –Ω–∞ –Ω—ë–º –ø–∞—Ä—É –º–∏–Ω—É—Ç. –≠—Ç–æ —Ä–µ–∞–ª—å–Ω—ã–π –¥–æ–ø–∏–Ω–≥.",
    "üëï –ù–∞–¥–µ–Ω—å —á—Ç–æ-–Ω–∏–±—É–¥—å –º—è–≥–∫–æ–µ –∏ –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ–µ. –≠—Ç–æ –±–æ–ª—å—à–µ –≤–ª–∏—è–µ—Ç, —á–µ–º –∫–∞–∂–µ—Ç—Å—è.",
    "üì¶ –ó–∞–≤–∞–ª–∏–ª–∞—Å—å —Å –¥–µ–ª–∞–º–∏? –ù–∞—á–Ω–∏ —Å –æ–¥–Ω–æ–≥–æ —Å–∞–º–æ–≥–æ –ø—Ä–æ—Å—Ç–æ–≥–æ. –≠—Ç–æ —É–∂–µ –¥–≤–∏–∂–µ–Ω–∏–µ.",
    "üßº –£–±–µ—Ä–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å ‚Äî –ø–æ—Ä—è–¥–æ–∫ —Å–Ω–∞—Ä—É–∂–∏ –ø–æ–º–æ–≥–∞–µ—Ç –≤–Ω—É—Ç—Ä–∏.",
    "üìµ –ù–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤—Å—ë —Å—Ä–∞–∑—É. –¢—ã –º–æ–∂–µ—à—å –Ω–µ –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ–π.",
    "üõÅ –í–æ–¥–∞ —Ä–∞—Å—Å–ª–∞–±–ª—è–µ—Ç. –¢—ë–ø–ª—ã–π –¥—É—à = –∫–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏.",
    "ü•£ –ì–æ—Ä—è—á–∞—è –µ–¥–∞ –≤ –æ–¥–∏–Ω–æ—á–µ—Å—Ç–≤–µ ‚Äî —ç—Ç–æ —Ç–æ–∂–µ –∑–∞–±–æ—Ç–∞, –Ω–µ —Å—Ç—ã–¥.",
    "üßç –ü–æ—Å–ª—É—à–∞–π —Ç–µ–ª–æ: —Å—è–¥—å —É–¥–æ–±–Ω–æ, –ø—Ä–æ–≤–µ—Ä—å –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ –≤ –ø–ª–µ—á–∞—Ö, —á–µ–ª—é—Å—Ç–∏, —Ä—É–∫–∞—Ö.",
    "üîå –ü–µ—Ä–µ—Å—Ç–∞–Ω—å —Å–µ–±—è –ø–∏–Ω–∞—Ç—å. –ò–Ω–æ–≥–¥–∞ —á–µ—Å—Ç–Ω—ã–π –æ—Ç–¥—ã—Ö = —à–∞–≥ –≤–ø–µ—Ä—ë–¥.",
    "üß† –í—Å—ë, —á—Ç–æ —Ç—ã —á—É–≤—Å—Ç–≤—É–µ—à—å ‚Äî —ç—Ç–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, –∞ –Ω–µ –ø—Ä–∏–≥–æ–≤–æ—Ä.",
    "üéà –¢—ã –Ω–µ –æ–±—è–∑–∞–Ω–∞ –±—ã—Ç—å –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–π, —á—Ç–æ–±—ã –±—ã—Ç—å —Ü–µ–Ω–Ω–æ–π.",
    "üßÉ –ï—Å–ª–∏ –∑–∞–±—ã–ª–∞ –ø–æ–µ—Å—Ç—å ‚Äî —Å–µ–π—á–∞—Å —Ö–æ—Ä–æ—à–µ–µ –≤—Ä–µ–º—è. –î–∞–∂–µ –ø–∞—Ä–∞ –ª–æ–∂–µ–∫ ‚Äî —É–∂–µ –Ω–µ –ø—É—Å—Ç–æ.",
    "üí§ –ï—Å–ª–∏ —É—Å—Ç–∞–ª–∞ ‚Äî –ø–æ–ª–µ–∂–∏, –¥–∞–∂–µ 10 –º–∏–Ω—É—Ç —Å –∑–∞–∫—Ä—ã—Ç—ã–º–∏ –≥–ª–∞–∑–∞–º–∏ –º–µ–Ω—è—é—Ç –≤–æ—Å–ø—Ä–∏—è—Ç–∏–µ.",
    "üìµ –û—Ç–∫–ª—é—á–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ö–æ—Ç—è –±—ã –Ω–∞ 1 —á–∞—Å. –¢–∏—à–∏–Ω–∞ ‚Äî —ç—Ç–æ –∑–∞–±–æ—Ç–∞.",
    "üì¶ –°–¥–µ–ª–∞–π –æ–¥–Ω–æ –º–∞–ª–µ–Ω—å–∫–æ–µ –¥–µ–ª–æ. –î–∞–∂–µ –º—ã—Ç—å –∫—Ä—É–∂–∫—É ‚Äî —É–∂–µ –¥–µ–π—Å—Ç–≤–∏–µ.",
    "üß∫ –ï—Å–ª–∏ —Ä–∞–∑–¥—Ä–∞–∂–∞–µ—Ç –±–∞—Ä–¥–∞–∫ ‚Äî —É–±–µ—Ä–∏ 1 –≤–µ—â—å. –¢–æ–ª—å–∫–æ –æ–¥–Ω—É.",
    "üåø –û—Ç–∫—Ä–æ–π –æ–∫–Ω–æ. –ü—Ä–æ–≤–µ—Ç—Ä–∏–≤–∞–Ω–∏–µ = —Å–±—Ä–æ—Å –Ω–∞–∫–æ–ø–∏–≤—à–µ–≥–æ—Å—è.",
    "üß¥ –ü–æ–º–∞–∂—å —Ä—É–∫–∏ –∏–ª–∏ –ª–∏—Ü–æ ‚Äî –ø—Ä–∏–∫–æ—Å–Ω–æ–≤–µ–Ω–∏–µ –∫ —Å–µ–±–µ = —Å–∏–≥–Ω–∞–ª ¬´—è –µ—Å—Ç—å¬ª",
    "üéµ –ù–∞–π–¥–∏ 1 —Ç—Ä–µ–∫, –æ—Ç –∫–æ—Ç–æ—Ä–æ–≥–æ –ª–µ–≥—á–µ ‚Äî –∏ –ø—Ä–æ—Å—Ç–æ –≤–∫–ª—é—á–∏.",
    "üßò‚Äç‚ôÄÔ∏è –ü–æ—Ç—è–Ω–∏—Å—å, —Ä–∞—Å–∫—Ä—É—Ç–∏ –ø–ª–µ—á–∏, –ø–æ—à–µ–≤–µ–ª–∏ —à–µ–µ–π. –¢–µ–ª—É —Ç–æ–∂–µ —Ç—è–∂–µ–ª–æ –æ—Ç –≤—Å–µ–≥–æ.",
    "üëñ –ù–∞–¥–µ–Ω—å —Ç—ë–ø–ª—ã–µ –Ω–æ—Å–∫–∏ –∏–ª–∏ –∫–æ—Ñ—Ç—É. –§–∏–∑–∏—á–µ—Å–∫–∏–π –∫–æ–º—Ñ–æ—Ä—Ç –≤–∞–∂–µ–Ω –ø—Ä–∏ —Ç—Ä–µ–≤–æ–≥–µ.",
    "üíå –ù–∞–ø–∏—à–∏ —Å–µ–±–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–µ–ª–∞ –±—ã –ø–æ–ª—É—á–∏—Ç—å. –ü—Ä–æ—á—Ç–∏ –≤—Å–ª—É—Ö.",
    "üìÖ –ù–µ –Ω–∞–¥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∂–∏–∑–Ω—å. –ü—Ä–æ—Å—Ç–æ –ø—Ä–æ–∂–∏–≤–∏ —Å–µ–≥–æ–¥–Ω—è.",
    "üîå –†–∞–∑—Ä–µ—à–∏ —Å–µ–±–µ –æ—Ç–ª–æ–∂–∏—Ç—å. –ù–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤—Å—ë —Å–µ–π—á–∞—Å.",
    "ü™û –ü–æ—Å–º–æ—Ç—Ä–∏ –≤ –∑–µ—Ä–∫–∞–ª–æ –∏ –Ω–µ –æ—Ü–µ–Ω–∏–≤–∞–π. –ü—Ä–æ—Å—Ç–æ –∑–∞—Ñ–∏–∫—Å–∏—Ä—É–π: —Ç—ã –µ—Å—Ç—å.",
    "ü´ñ –í—ã–ø–µ–π —á—Ç–æ-—Ç–æ —Ç—ë–ø–ª–æ–µ. –ù–µ –¥–ª—è –ø–æ–ª—å–∑—ã, –∞ –¥–ª—è —Ç–µ–ø–ª–∞.",
    "ü™´ –¢—ã –º–æ–∂–µ—à—å –Ω–µ –±—ã—Ç—å ¬´–Ω–∞ —Å–≤—è–∑–∏¬ª. –î–∞–∂–µ —Å –±–ª–∏–∑–∫–∏–º–∏. –≠—Ç–æ –ø—Ä–∞–≤–æ.",
    "üö∞ –ü–µ–π –≤–æ–¥—É, –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ —Ö–æ—á–µ—à—å. –û–±–µ–∑–≤–æ–∂–µ–Ω–Ω–æ—Å—Ç—å —É—Å–∏–ª–∏–≤–∞–µ—Ç —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç—å.",
    "üìâ –ù–µ —Å—Ä–∞–≤–Ω–∏–≤–∞–π ‚Äî –æ—Å–æ–±–µ–Ω–Ω–æ —Å–µ–±—è —Å —Å–æ–±–æ–π –≤ ¬´–ª—É—á—à–µ–π –≤–µ—Ä—Å–∏–∏¬ª.",
    "üîÅ –í—Å—ë —Ü–∏–∫–ª–∏—á–Ω–æ. –°–µ–≥–æ–¥–Ω—è—à–Ω–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ‚Äî –Ω–µ –ø—Ä–∏–≥–æ–≤–æ—Ä.",
    "ü´Ç –ù–∞–ø–æ–º–Ω–∏ —Å–µ–±–µ: —Ç—ã –≤—ã–∂–∏–ª–∞ —É–∂–µ –Ω–µ –æ–¥–∏–Ω —Ç—è–∂—ë–ª—ã–π –¥–µ–Ω—å. –ó–Ω–∞—á–∏—Ç, –∏ —ç—Ç–æ—Ç –ø—Ä–æ–∂–∏–≤—ë—à—å."
]

user_data = {}

easter_eggs = [
    "üê£ –ü–∞—Å—Ö–∞–ª–∫–∞: —Ç—ã –æ–¥–Ω–æ–∫–ª–µ—Ç–æ—á–Ω—ã–π –∏—à–∞–∫, –Ω–æ –≤—Å—ë —Ä–∞–≤–Ω–æ –ª—é–±–∏–º—ã–π üíõ",
    "üê£ –ü–∞—Å—Ö–∞–ª–∫–∞: —É–∞–Ω—é—á–∏–π, –¥–∞. –ù–æ —Å –¥—É—à–æ–π üò§",
    "üê£ –ü–∞—Å—Ö–∞–ª–∫–∞: –µ—Å–ª–∏ –±—ã —Ç—ã –±—ã–ª –±–∞–≥–æ–º ‚Äî —è –±—ã —Ç–µ–±—è –Ω–µ —Ñ–∏–∫—Å–∏–ª ü´Ç",
    "üê£ –ü–∞—Å—Ö–∞–ª–∫–∞: —Ç–≤–∞—Ä, –∫–æ–Ω–µ—á–Ω–æ, –Ω–æ —Ç—ë–ø–ª–∞—è —Ç–≤–∞—Ä üê∏",
    "üê£ –ü–∞—Å—Ö–∞–ª–∫–∞: –¥–∞–∂–µ –µ–±–∞–Ω–Ω—ã–π ‚Äî –≤—Å—ë –µ—â—ë —á–µ–ª–æ–≤–µ–∫ ü´†"
]

# --- –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π ---
reminder_kb = types.InlineKeyboardMarkup(
    inline_keyboard=[
        [
            types.InlineKeyboardButton(text="‚úÖ –í—ã–ø–∏–ª–∞", callback_data="confirm_water")
        ]
    ]
)

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è mood —Ç—Ä–µ–∫–∏–Ω–≥–∞ ---
def mood_inline_keyboard(step):
    # step: 0..4, —à–∫–∞–ª–∞ —Ç–µ–ø–µ—Ä—å –æ—Ç 1 –¥–æ 5
    return types.InlineKeyboardMarkup(
        inline_keyboard=[
            [
                types.InlineKeyboardButton(text=str(i), callback_data=f"mood_{step}_{i}")
                for i in range(1, 6)
            ]
        ]
    )

# --- –û–±—ë—Ä—Ç–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ ADMIN_ID ---
def admin_only(handler):
    async def wrapper(message: types.Message, **kwargs):
        print(f"[ADMIN_ONLY] Called for user {getattr(message.from_user, 'id', None)} with text: {getattr(message, 'text', None)}")
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥—ã, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å /
        if message.text and message.text.startswith('/'):
            if message.from_user.id != ADMIN_ID:
                print(f"[LOG] Access denied for {message.from_user.id} to admin command {message.text}")
                await message.answer("–£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
                return
            print(f"[LOG] ADMIN {message.from_user.id} triggered {message.text}")
        else:
            print(f"[ADMIN_ONLY] Not a command or no text: {getattr(message, 'text', None)}")
        return await handler(message, **kwargs)
    return wrapper

# --- –û–±—ë—Ä—Ç–∫–∞ –¥–ª—è callback_query (admin only, –µ—Å–ª–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è) ---
def admin_only_callback(handler):
    async def wrapper(callback_query, *args, **kwargs):
        if callback_query.from_user.id != ADMIN_ID:
            print(f"[LOG] Access denied for {callback_query.from_user.id} to callback {callback_query.data}")
            await callback_query.answer("–£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.", show_alert=True)
            return
        print(f"[LOG] ADMIN {callback_query.from_user.id} triggered callback {callback_query.data}")
        return await handler(callback_query, *args, **kwargs)
    return wrapper

reminder_states = {}
ping_blocked_until = {}
active_users = set()
file_lock = threading.Lock()
reminder_states_lock = asyncio.Lock()
buffer = []

# --- –û–±—ä—è–≤–ª–µ–Ω–∏–µ —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤ (–≤—Å–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç **kwargs) ---

async def start_handler(message: types.Message, **kwargs):
    print(f"[DEBUG] /start from {message.chat.id}")
    user_data[message.chat.id] = {'step': 0, 'entry': {}}
    greeting = (
        "üê∞ –ü—Ä–∏–≤–µ—Ç, –∑–∞–π–∫–∞. –≠—Ç–æ –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —è —Å–¥–µ–ª–∞–ª —Å –ª—é–±–æ–≤—å—é —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ–±—è.\n\n"
        "–û–Ω –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ, —Ñ–æ–∫—É—Å, —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç—å –∏ –≤—Å—ë, —á—Ç–æ –º–æ–∂–µ—Ç –Ω–µ–∑–∞–º–µ—Ç–Ω–æ —Å–±–∏–≤–∞—Ç—å—Å—è.\n"
        "–¢—ã –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ—à—å –Ω–∞ –ø–∞—Ä—É –≤–æ–ø—Ä–æ—Å–æ–≤ ‚Äî –∏ –≤—Å—ë. –ù–∏–∫–∞–∫–∏—Ö –≤—ã–≤–æ–¥–æ–≤, —Ç–æ–ª—å–∫–æ –ø–æ–¥–¥–µ—Ä–∂–∫–∞. üíõ\n\n"
        "–ß—Ç–æ –¥–µ–ª–∞–µ—Ç –±–æ—Ç:\n"
        "‚Äî –£—Ç—Ä–æ–º –∏ –≤–µ—á–µ—Ä–æ–º –ø—Ä–æ—Å–∏—Ç —Ç–µ–±—è –æ—Ü–µ–Ω–∏—Ç—å —Å–≤–æ—ë —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ —à–∫–∞–ª–µ –æ—Ç 1 –¥–æ 10 –ø–æ –ø—è—Ç–∏ –∫—Ä–∏—Ç–µ—Ä–∏—è–º.\n"
        "‚Äî –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –ª—é–±—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏.\n"
        "‚Äî –ü—Ä–∏—Å—ã–ª–∞–µ—Ç –¥–æ–±—Ä—ã–µ —Å–æ–≤–µ—Ç—ã, —á—Ç–æ–±—ã —Å—Ç–∞–ª–æ —Ö–æ—Ç—è –±—ã –Ω–µ–º–Ω–æ–≥–æ –ª–µ–≥—á–µ.\n"
        "‚Äî –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—Å—ë –≤ —Ñ–∞–π–ª, —á—Ç–æ–±—ã –ø–æ—Ç–æ–º –º–æ–∂–Ω–æ –±—ã–ª–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å, –∫–æ–≥–¥–∞ –∏ –ø–æ—á–µ–º—É —Å—Ç–∞–Ω–æ–≤–∏–ª–æ—Å—å —Ç—è–∂–µ–ª–æ.\n\n"
        "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å: –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ /start –∏–ª–∏ –¥–æ–∂–¥–∏—Å—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.\n"
        "–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç ‚Äî –Ω–∞–ø–∏—à–∏ –¢–∏–º—É—Ä—É.\n\n"
        "–ü–æ–≥–Ω–∞–ª–∏? –î–∞–≤–∞–π –æ—Ü–µ–Ω–∏–º —Ç–≤–æ—ë —Å–æ—Å—Ç–æ—è–Ω–∏–µ. –ü–æ —à–∫–∞–ª–µ –æ—Ç 1 –¥–æ 10:"
    )
    await message.answer(greeting)
    await ask_next_field(message)

async def ask_next_field(message: types.Message, **kwargs):
    print(f"[DEBUG] ask_next_field for user {message.chat.id}, step {user_data[message.chat.id]['step']}")
    step = user_data[message.chat.id]['step']
    if step < len(mood_fields):
        _, field_name = mood_fields[step]
        await message.answer(f"{field_name} (1‚Äì5):")
    else:
        await message.answer("–•–æ—á–µ—à—å —á—Ç–æ-—Ç–æ –¥–æ–±–∞–≤–∏—Ç—å? –ù–∞–ø–∏—à–∏ —Å—é–¥–∞. –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å '-' –∏–ª–∏ '–Ω–µ—Ç'.")

async def ask_next_field_mood(chat_id):
    step = user_data[chat_id]['step']
    if step < len(mood_fields):
        _, field_name = mood_fields[step]
        await bot.send_message(
            chat_id,
            f"{field_name} (1‚Äì5):",
            reply_markup=mood_inline_keyboard(step)
        )
    else:
        await bot.send_message(
            chat_id,
            "–•–æ—á–µ—à—å —á—Ç–æ-—Ç–æ –¥–æ–±–∞–≤–∏—Ç—å? –ù–∞–ø–∏—à–∏ —Å—é–¥–∞. –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å '-' –∏–ª–∏ '–Ω–µ—Ç'."
        )

# --- –¢–µ—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã (–æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—É) ---
async def test_water(message: types.Message, **kwargs):
    print(f"[DEBUG] test_water called by {message.chat.id}")
    await message.answer("üíß –¢–µ—Å—Ç: –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø—Ä–æ –≤–æ–¥—É (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—É)", reply_markup=reminder_kb)
    reminder_states[message.chat.id] = {'type': 'water', 'time': datetime.datetime.now()}
    asyncio.create_task(water_annoy_loop(message.chat.id))

async def test_tablets(message: types.Message, **kwargs):
    print(f"[DEBUG] test_tablets called by {message.chat.id}")
    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è–ª–∞", callback_data="confirm_tablets")]
        ]
    )
    await message.answer("üíä –¢–µ—Å—Ç: –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø—Ä–æ —Ç–∞–±–ª–µ—Ç–∫–∏ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—É)", reply_markup=keyboard)
    reminder_states[message.chat.id] = {'type': 'tablets', 'time': datetime.datetime.now()}
    asyncio.create_task(tablet_annoy_loop(message.chat.id))

async def test_mood(message: types.Message, **kwargs):
    print(f"[DEBUG] test_mood called by {message.chat.id}")
    await message.answer("üß† –¢–µ—Å—Ç: –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø—Ä–æ —Ç—Ä–µ–∫–∏–Ω–≥ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—É)")

async def test_tip(message: types.Message, **kwargs):
    print(f"[DEBUG] test_tip called by {message.chat.id}")
    await message.answer(f"–¢–µ—Å—Ç–æ–≤—ã–π —Å–æ–≤–µ—Ç (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—É): {random.choice(random_tips)}")

async def test_combo_reminder():
    try:
        # –í–æ–¥–∞
        await bot.send_message(
            TARGET_USER_ID,
            "üíß –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –Ω–µ –∑–∞–±—É–¥—å –ø–∏—Ç—å –≤–æ–¥—É",
            reply_markup=reminder_kb
        )
        reminder_states[TARGET_USER_ID] = {'type': 'water', 'time': datetime.datetime.now()}
        asyncio.create_task(water_annoy_loop(TARGET_USER_ID))

        # –¢–∞–±–ª–µ—Ç–∫–∏
        keyboard = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [types.InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è–ª–∞", callback_data="confirm_tablets")]
            ]
        )
        await bot.send_message(
            TARGET_USER_ID,
            "üíä –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –Ω–µ –∑–∞–±—É–¥—å –ø—Ä–∏–Ω—è—Ç—å –¥–æ–±–∞–≤–∫–∏ / —Ç–∞–±–ª–µ—Ç–∫–∏",
            reply_markup=keyboard
        )
        reminder_states[TARGET_USER_ID] = {'type': 'tablets', 'time': datetime.datetime.now()}
        asyncio.create_task(tablet_annoy_loop(TARGET_USER_ID))

        # –û–ø—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è (–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ ask_next_field_mood)
        user_data[TARGET_USER_ID] = {'step': 0, 'entry': {}}
        await ask_next_field_mood(TARGET_USER_ID)

        print("[DEBUG] test_combo_reminder: –≤—Å–µ —Ç—Ä–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã")
    except Exception as e:
        print(f"[ERROR] test_combo_reminder: {e}")

# --- SEND-–∫–æ–º–∞–Ω–¥—ã (–æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç –µ–π) ---
async def send_water(message: types.Message, **kwargs):
    print(f"[DEBUG] send_water called by {message.chat.id}")
    target_id = TARGET_USER_ID
    print(f"[DEBUG] TARGET_USER_ID = {target_id} (type: {type(target_id)})")
    try:
        await bot.send_message(target_id, "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –º—É–∂–∞:\nüíß –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –Ω–µ –∑–∞–±—É–¥—å –ø–∏—Ç—å –≤–æ–¥—É", reply_markup=reminder_kb)
        reminder_states[target_id] = {'type': 'water', 'time': datetime.datetime.now()}
        asyncio.create_task(water_annoy_loop(target_id))
        await message.answer("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –µ–π.")
    except Exception as e:
        print(f"[ERROR] send_water: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")

async def send_tablets(message: types.Message, **kwargs):
    print(f"[DEBUG] send_tablets called by {message.chat.id}")
    target_id = TARGET_USER_ID
    print(f"[DEBUG] TARGET_USER_ID = {target_id} (type: {type(target_id)})")
    try:
        keyboard = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [types.InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è–ª–∞", callback_data="confirm_tablets")]
            ]
        )
        await bot.send_message(target_id, "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –º—É–∂–∞:\nüíä –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –Ω–µ –∑–∞–±—É–¥—å –ø—Ä–∏–Ω—è—Ç—å –¥–æ–±–∞–≤–∫–∏ / —Ç–∞–±–ª–µ—Ç–∫–∏", reply_markup=keyboard)
        reminder_states[target_id] = {'type': 'tablets', 'time': datetime.datetime.now()}
        asyncio.create_task(tablet_annoy_loop(target_id))
        await message.answer("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –µ–π.")
    except Exception as e:
        print(f"[ERROR] send_tablets: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")

async def send_mood(message: types.Message, **kwargs):
    print(f"[DEBUG] send_mood called by {message.chat.id}")
    target_id = TARGET_USER_ID
    print(f"[DEBUG] TARGET_USER_ID = {target_id} (type: {type(target_id)})")
    try:
        # Initialize the mood tracking process for the target user
        user_data[target_id] = {'step': 0, 'entry': {}}
        await bot.send_message(
            target_id,
            "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –º—É–∂–∞:\nüß† –ö–∞–∫ —Ç—ã —Å–µ–π—á–∞—Å? –î–∞–≤–∞–π –æ—Ü–µ–Ω–∏–º —Ç–≤–æ—ë —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ —à–∫–∞–ª–µ –æ—Ç 1 –¥–æ 5:\n"
            "1. –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ\n2. –¢—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç—å\n3. –≠–Ω–µ—Ä–≥–∏—è\n4. –§–æ–∫—É—Å\n5. –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å\n\n"
            "–ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–∏–º–∞–π –Ω–∞ –∫–Ω–æ–ø–∫–∏, —è –≤—Å—ë –∑–∞–ø–∏—à—É.",
        )
        await ask_next_field_mood(target_id)
        await message.answer("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –µ–π.")
    except Exception as e:
        print(f"[ERROR] send_mood: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")

async def send_tip(message: types.Message, **kwargs):
    print(f"[DEBUG] send_tip called by {message.chat.id}")
    target_id = TARGET_USER_ID
    print(f"[DEBUG] TARGET_USER_ID = {target_id} (type: {type(target_id)})")
    try:
        await bot.send_message(target_id, f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –º—É–∂–∞:\nüìå –°–æ–≤–µ—Ç: {random.choice(random_tips)}")
        await message.answer("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –µ–π.")
    except Exception as e:
        print(f"[ERROR] send_tip: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")

async def send_message(message: types.Message, **kwargs):
    print(f"[DEBUG] send_message called by {message.chat.id}")
    target_id = TARGET_USER_ID
    print(f"[DEBUG] TARGET_USER_ID = {target_id} (type: {type(target_id)})")
    try:
        text = message.text.split(maxsplit=1)
        if len(text) < 2:
            await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã. –ü—Ä–∏–º–µ—Ä: `/say –ü—Ä–∏–≤–µ—Ç!`")
            return
        await bot.send_message(target_id, f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –º—É–∂–∞:\n{text[1]}")
        await message.answer("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
    except Exception as e:
        print(f"[ERROR] send_message: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")

async def test_reminders(message: types.Message, **kwargs):
    print(f"[DEBUG] test_reminders called by {message.chat.id}")
    await message.answer("üîî –¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –±–æ–ª—å—à–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å—Ä–∞–∑—É. –ò—Å–ø–æ–ª—å–∑—É–π –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                         "/test_water ‚Äî –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø—Ä–æ –≤–æ–¥—É\n"
                         "/test_tablets ‚Äî –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø—Ä–æ —Ç–∞–±–ª–µ—Ç–∫–∏\n"
                         "/test_mood ‚Äî –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø—Ä–æ —Ç—Ä–µ–∫–∏–Ω–≥ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è\n"
                         "/test_tip ‚Äî —Å–ª—É—á–∞–π–Ω—ã–π —Å–æ–≤–µ—Ç")

async def clear_log(message: types.Message, **kwargs):
    print(f"[DEBUG] clear_log called by {message.chat.id}")
    with open(STATE_FILE, 'w') as f:
        json.dump([], f)
    await message.answer("üßπ –õ–æ–≥ –æ—á–∏—â–µ–Ω. –í—Å–µ –∑–∞–ø–∏—Å–∏ —É–¥–∞–ª–µ–Ω—ã.")

async def test_log_entry(message: types.Message, **kwargs):
    print(f"[DEBUG] test_log_entry called by {message.chat.id}")
    dummy_entry = {
        "mood": 5,
        "anxiety": 4,
        "energy": 3,
        "focus": 6,
        "reactivity": 5,
        "comment": "—Ç–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å",
        "timestamp": datetime.datetime.now().isoformat()
    }
    save_entry(dummy_entry)
    await message.answer("üìÅ –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –ª–æ–≥.")

async def export_log(message: types.Message, **kwargs):
    print(f"[DEBUG] export_log called by {message.chat.id}")
    try:
        print(f"[LOG] export_log called by {message.chat.id}")
        await message.answer_document(
            types.FSInputFile("mood_log.json"),
            caption="üìÇ –í–æ—Ç –ª–æ–≥ —Å–æ –≤—Å–µ–º–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–º–∏"
        )
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")

async def disable_pings(message: types.Message, **kwargs):
    print(f"[DEBUG] disable_pings called by {message.chat.id}")
    chat_id = message.chat.id
    ping_blocked_until[chat_id] = datetime.datetime.now() + datetime.timedelta(hours=1)
    print(f"[LOG] USER {chat_id} –æ—Ç–∫–ª—é—á–∏–ª –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–æ {ping_blocked_until[chat_id]}")
    
    # –£–¥–∞–ª—è–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    async with reminder_states_lock:
        if chat_id in reminder_states:
            reminder_states.pop(chat_id, None)
    
    # –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Ç—Ä–µ–∫–∏–Ω–≥–∞
    active_users.discard(chat_id)
    
    await message.answer("ü´† –û–∫–µ–π, –æ—Ç–∫–ª—é—á–∞—é –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞ 1 —á–∞—Å. –ù–æ –ø–æ—Ç–æ–º —è –≤–µ—Ä–Ω—É—Å—å!")

async def update_reminder_state(chat_id, state):
    async with reminder_states_lock:
        reminder_states[chat_id] = state

def flush_buffer():
    global buffer
    if not buffer:
        return
    with file_lock:
        try:
            with open(STATE_FILE, 'r+') as f:
                try:
                    data = json.load(f)
                except json.JSONDecodeError:
                    data = []
                data.extend(buffer)
                f.seek(0)
                json.dump(data, f, indent=2, ensure_ascii=False)
                f.truncate()
            buffer = []
        except IOError as e:
            logger.error(f"Failed to flush buffer: {e}")

def save_entry(entry):
    logger.debug(f"save_entry: {entry}")
    buffer.append(entry)
    if len(buffer) >= BUFFER_SIZE:
        flush_buffer()

async def process_input(message: types.Message, **kwargs):
    try:
        logger.debug(f"process_input called by {message.from_user.id} with text: {message.text}")
        if message.from_user.id == ADMIN_ID:
            if message.text and message.text.startswith('/'):
                return
            await message.answer("–≠—Ç–æ—Ç –±–æ—Ç –Ω–µ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–º.")
            return

        if message.chat.id in active_users:
            await message.answer("–°–µ–π—á–∞—Å –∏–¥—ë—Ç —Ç—Ä–µ–∫–∏–Ω–≥ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è. –ó–∞–≤–µ—Ä—à–∏ –µ–≥–æ, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.")
            return

        if message.text.lower().strip() in ['/export_log', '/start', '/–æ—Ç—ä–µ–±–∏—Å—å']:
            return
        print(f"[DEBUG] process_input: {message.text} from {message.chat.id}")
        text = message.text.lower().strip()
        if any(word in text for word in ['–∏—à–∞–∫', '–æ–¥–Ω–æ–∫–ª–µ—Ç–æ—á–Ω—ã–π', '—Ç–≤–∞—Ä', '—É–∞–Ω—é—á–∏–π', '–µ–±—É—á–∏–π', '–µ–±–∞–Ω–Ω—ã–π']):
            await message.answer(random.choice(easter_eggs))
            return
        user_id = message.chat.id
        if user_id not in user_data:
            await message.answer("–ù–∞–ø–∏—à–∏ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ç—Ä–µ–∫–∏–Ω–≥.")
            return

        step = user_data[user_id]['step']

        if step < len(mood_fields):
            try:
                val = int(message.text.strip())
                if not (1 <= val <= 5):
                    raise ValueError
                field_key, _ = mood_fields[step]
                user_data[user_id]['entry'][field_key] = val
                user_data[user_id]['step'] += 1
                # --- –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ –∫–∞–∂–¥–æ–º –æ—Ç–≤–µ—Ç–µ ---
                await bot.send_message(ADMIN_ID, f"–û—Ç–≤–µ—Ç –Ω–∞ –æ–ø—Ä–æ—Å ({field_key}): {val}")
                await ask_next_field(message)
            except ValueError:
                await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 5.")
        else:
            comment = message.text.strip()
            if comment.lower() in ['-', '–Ω–µ—Ç']:
                comment = ''
            entry = user_data[user_id]['entry']
            entry['comment'] = comment
            entry['timestamp'] = datetime.datetime.now().isoformat()
            save_entry(entry)
            await message.answer("–°–ø–∞—Å–∏–±–æ. –í—Å—ë –∑–∞–ø–∏—Å–∞–ª. ‚úçÔ∏è")
            await message.answer(f"–°–æ–≤–µ—Ç –¥–Ω—è: {random.choice(random_tips)}")
            # --- –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ–ø—Ä–æ—Å–∞ ---
            await bot.send_message(ADMIN_ID, f"–û–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à—ë–Ω. –û—Ç–≤–µ—Ç—ã: {json.dumps(entry, ensure_ascii=False)}")
            user_data.pop(user_id, None)
    except Exception as e:
        logger.error(f"Error in process_input: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

async def reminder_callback_handler(callback_query: types.CallbackQuery):
    print(f"[LOG] Callback {callback_query.data} –æ—Ç {callback_query.from_user.id}")
    # --- –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ ---
    if callback_query.from_user.id == TARGET_USER_ID:
        if callback_query.data.startswith('confirm_'):
            if callback_query.data == 'confirm_water':
                await bot.send_message(ADMIN_ID, "–í–æ–¥–∞: –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ!")
            else:
                await bot.send_message(ADMIN_ID, f"–û–Ω–∞ –Ω–∞–∂–∞–ª–∞: {callback_query.data.replace('confirm_', '').capitalize()}")
    # --- –û—á–∏—â–∞–µ–º reminder_states –¥–ª—è confirm_water –∏ confirm_tablets ---
    if callback_query.data == 'confirm_water':
        reminder_states.pop(callback_query.from_user.id, None)
        await callback_query.message.edit_text("–ü—Ä–∏–Ω—è—Ç–æ! ü•≥")
    elif callback_query.data == 'confirm_tablets':
        reminder_states.pop(callback_query.from_user.id, None)
        await callback_query.message.edit_text("–ü—Ä–∏–Ω—è—Ç–æ! ü•≥")

async def confirm_tablets_callback(callback_query: types.CallbackQuery):
    chat_id = callback_query.from_user.id
    reminder_states.pop(chat_id, None)
    print(f"[LOG] confirm_tablets –æ—Ç {chat_id}")
    await callback_query.message.edit_text("üíä –ü—Ä–∏–Ω—è—Ç–æ. –£–º–Ω–∏—Ü–∞.")
    # --- –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ ---
    if chat_id == TARGET_USER_ID:
        await bot.send_message(ADMIN_ID, "–¢–∞–±–ª–µ—Ç–∫–∏: –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ!")

async def confirm_water_callback(callback_query: types.CallbackQuery):
    chat_id = callback_query.from_user.id
    reminder_states.pop(chat_id, None)
    print(f"[LOG] confirm_water –æ—Ç {chat_id}")
    await callback_query.message.edit_text("üíß –•–æ—Ä–æ—à! –í–æ–¥–∞ –≤–Ω—É—Ç—Ä–∏ ‚Äî —Å–∏–ª–∞ —Å–Ω–∞—Ä—É–∂–∏.")
    # --- –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ ---
    if chat_id == TARGET_USER_ID:
        await bot.send_message(ADMIN_ID, "–í–æ–¥–∞: –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ!")

async def periodic_tip():
    print("[DEBUG] periodic_tip called at", datetime.datetime.now())
    try:
        message = f"üìå –°–æ–≤–µ—Ç: {random.choice(random_tips)}"
        await bot.send_message(TARGET_USER_ID, message)
        print(f"[LOG] periodic_tip –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {TARGET_USER_ID}")
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
        await bot.send_message(ADMIN_ID, f"(–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {message})")
    except Exception as e:
        print(f"[LOG] periodic_tip error for TARGET_USER_ID: {e}")

async def send_water_reminder(chat_id):
    try:
        async with reminder_states_lock:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
            if chat_id in reminder_states and reminder_states[chat_id].get('type') == 'water':
                logger.debug(f"Water reminder already active for {chat_id}")
                return

        message = "üíß –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –Ω–µ –∑–∞–±—É–¥—å –ø–∏—Ç—å –≤–æ–¥—É"
        await bot.send_message(chat_id, message, reply_markup=reminder_kb)
        await update_reminder_state(chat_id, {'type': 'water', 'time': datetime.datetime.now()})
        asyncio.create_task(water_annoy_loop(chat_id))
        
        if chat_id == TARGET_USER_ID:
            await bot.send_message(ADMIN_ID, f"(–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {message})")
    except Exception as e:
        logger.error(f"Error in send_water_reminder: {e}")

async def send_tablets_reminder(chat_id):
    try:
        async with reminder_states_lock:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
            if chat_id in reminder_states and reminder_states[chat_id].get('type') == 'tablets':
                logger.debug(f"Tablets reminder already active for {chat_id}")
                return

        message = "üíä –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –Ω–µ –∑–∞–±—É–¥—å –ø—Ä–∏–Ω—è—Ç—å –¥–æ–±–∞–≤–∫–∏ / —Ç–∞–±–ª–µ—Ç–∫–∏"
        keyboard = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [types.InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è–ª–∞", callback_data="confirm_tablets")]
            ]
        )
        await bot.send_message(chat_id, message, reply_markup=keyboard)
        await update_reminder_state(chat_id, {'type': 'tablets', 'time': datetime.datetime.now()})
        asyncio.create_task(tablet_annoy_loop(chat_id))
        
        if chat_id == TARGET_USER_ID:
            await bot.send_message(ADMIN_ID, f"(–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {message})")
    except Exception as e:
        logger.error(f"Error in send_tablets_reminder: {e}")

async def send_mood_reminder(chat_id):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏–¥–µ—Ç –ª–∏ —É–∂–µ –æ–ø—Ä–æ—Å
        if chat_id in active_users:
            logger.debug(f"Mood tracking already active for {chat_id}")
            return
            
        message = (
            "üß† –ö–∞–∫ —Ç—ã —Å–µ–π—á–∞—Å? –î–∞–≤–∞–π –æ—Ü–µ–Ω–∏–º —Ç–≤–æ—ë —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ —à–∫–∞–ª–µ –æ—Ç 1 –¥–æ 5:\n"
            "1. –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ\n2. –¢—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç—å\n3. –≠–Ω–µ—Ä–≥–∏—è\n4. –§–æ–∫—É—Å\n5. –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å\n\n"
            "–ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–∏–º–∞–π –Ω–∞ –∫–Ω–æ–ø–∫–∏, —è –≤—Å—ë –∑–∞–ø–∏—à—É."
        )
        
        active_users.add(chat_id)  # –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –Ω–∞—á–∞–ª—Å—è –æ–ø—Ä–æ—Å
        user_data[chat_id] = {'step': 0, 'entry': {}}
        
        await bot.send_message(chat_id, message)
        await ask_next_field_mood(chat_id)
        
        if chat_id == TARGET_USER_ID:
            await bot.send_message(ADMIN_ID, f"(–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {message})")
    except Exception as e:
        logger.error(f"Error in send_mood_reminder: {e}")
        active_users.discard(chat_id)  # –£–±–∏—Ä–∞–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏

async def water_annoy_loop(chat_id):
    await asyncio.sleep(WATER_REMINDER_INTERVAL)  # 30 minutes
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –µ—â–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
    async with reminder_states_lock:
        if chat_id not in reminder_states or reminder_states[chat_id].get('type') != 'water':
            return
            
    if chat_id in ping_blocked_until and datetime.datetime.now() < ping_blocked_until[chat_id]:
        return
        
    if chat_id == TARGET_USER_ID:
        await bot.send_message(ADMIN_ID, "–í–ù–ò–ú–ê–ù–ò–ï: –û–Ω–∞ –Ω–µ –Ω–∞–∂–∞–ª–∞ '–í—ã–ø–∏–ª–∞' –≤ —Ç–µ—á–µ–Ω–∏–µ 30 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –≤–æ–¥–µ!")
    
    water_annoy_texts = [
        "üö® –¢—ã –≤–æ–¥—É –≤–æ–æ–±—â–µ –ø—å—ë—à—å, –Ω–µ—Ç?",
        "üí¶ –ê–ª—ë, –æ—Ä–≥–∞–Ω–∏–∑–º —Å—É—à–∏—Ç—Å—è",
        "üåä –ù–∞–ø–æ–º–∏–Ω–∞—é: H2O ‚Äî —ç—Ç–æ –≤–∞–∂–Ω–æ, –∞ –Ω–µ –ø—Ä–æ—Å—Ç–æ —Ö–∏–º–∏—è!",
        "ü•§ –ü–∏—Ç—å –≤–æ–¥—É ‚Äî —ç—Ç–æ –Ω–µ –æ–ø—Ü–∏—è, –∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å!",
        "ü´ó –î–∞–∂–µ –æ–¥–∏–Ω –≥–ª–æ—Ç–æ–∫ ‚Äî —É–∂–µ –≤–∫–ª–∞–¥ –≤ –∑–¥–æ—Ä–æ–≤—å–µ.",
        "üíß –í–æ–¥–∞ –Ω—É–∂–Ω–∞ –Ω–µ —Ç–æ–ª—å–∫–æ —Ü–≤–µ—Ç–∞–º, –Ω–æ –∏ —Ç–µ–±–µ!",
        "üëÄ –Ø –≤—Å—ë –≤–∏–∂—É. –ì–¥–µ —Ç–≤–æ–π —Å—Ç–∞–∫–∞–Ω –≤–æ–¥—ã?",
        "ü´ô –ü–æ—Ä–∞ –Ω–∞–ø–æ–ª–Ω–∏—Ç—å –∫—Ä—É–∂–∫—É –∏ —Å–¥–µ–ª–∞—Ç—å –≥–ª–æ—Ç–æ–∫!",
        "üßä –ú–æ–∂–µ—Ç, –¥–æ–±–∞–≤–∏—Ç—å –ª—ë–¥? –ì–ª–∞–≤–Ω–æ–µ ‚Äî –≤—ã–ø–µ–π –≤–æ–¥—ã!",
        "üö∞ –ù–µ –∑–∞–±—ã–≤–∞–π: –≤–æ–¥–∞ ‚Äî —Ç–≤–æ–π –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Å—É–ø–µ—Ä–≥–µ—Ä–æ–π."
    ]
    while True:
        async with reminder_states_lock:
            if chat_id not in reminder_states or reminder_states[chat_id].get('type') != 'water':
                break
                
        if chat_id in ping_blocked_until and datetime.datetime.now() < ping_blocked_until[chat_id]:
            await asyncio.sleep(60)
            continue
            
        try:
            message = random.choice(water_annoy_texts)
            await bot.send_message(chat_id, message, reply_markup=reminder_kb)
            if chat_id == TARGET_USER_ID:
                await bot.send_message(ADMIN_ID, f"(–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –≤–æ–¥–µ)")
            await asyncio.sleep(600)  # 10 minutes
        except Exception as e:
            logger.error(f"Error in water_annoy_loop: {e}")
            break

async def tablet_annoy_loop(chat_id):
    await asyncio.sleep(TABLETS_REMINDER_INTERVAL)  # 10 minutes
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –µ—â–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
    async with reminder_states_lock:
        if chat_id not in reminder_states or reminder_states[chat_id].get('type') != 'tablets':
            return
            
    if chat_id in ping_blocked_until and datetime.datetime.now() < ping_blocked_until[chat_id]:
        return
        
    if chat_id == TARGET_USER_ID:
        await bot.send_message(ADMIN_ID, "–í–ù–ò–ú–ê–ù–ò–ï: –û–Ω–∞ –Ω–µ –Ω–∞–∂–∞–ª–∞ '–ü—Ä–∏–Ω—è–ª–∞' –≤ —Ç–µ—á–µ–Ω–∏–µ 10 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Ç–∞–±–ª–µ—Ç–∫–∞—Ö!")
    
    tablets_annoy_texts = [
        "üíä –ù–∞–ø–æ–º–∏–Ω–∞—é: —Ç–∞–±–ª–µ—Ç–∫–∏ —Å–∞–º–∏ —Å–µ–±—è –Ω–µ –ø—Ä–∏–º—É—Ç!",
        "‚è∞ –í—Ä–µ–º—è –ø—Ä–∏–Ω—è—Ç—å –¥–æ–±–∞–≤–∫–∏. –ù–µ –∑–∞–±—ã–≤–∞–π!",
        "üß† –û—Ä–≥–∞–Ω–∏–∑–º –∂–¥—ë—Ç –¥–æ–±–∞–≤–∫–∏. –ü–æ—Ä–∞ –ø—Ä–∏–Ω—è—Ç—å!",
        "üì¶ –¢–∞–±–ª–µ—Ç–∫–∏ –∂–¥—É—Ç —Ç–µ–±—è. –ù–µ –æ—Ç–∫–ª–∞–¥—ã–≤–∞–π!",
        "ü´ô –ü–æ—Ä–∞ –∑–∞–±–æ—Ç–∏—Ç—å—Å—è –æ —Å–µ–±–µ ‚Äî –¥–æ–±–∞–≤–∫–∏ –∂–¥—É—Ç!",
        "üïë –ù–µ —Ç—è–Ω–∏, –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏–º–∏ —Ç–∞–±–ª–µ—Ç–∫—É!",
        "üß¥ –≠—Ç–æ –Ω–µ —Å–ª–æ–∂–Ω–æ ‚Äî –ø—Ä–æ—Å—Ç–æ —Å–¥–µ–ª–∞–π —ç—Ç–æ —Å–µ–π—á–∞—Å.",
        "ü¶∏‚Äç‚ôÄÔ∏è –¢–∞–±–ª–µ—Ç–∫–∏ ‚Äî —Ç–≤–æ—è —Å—É–ø–µ—Ä—Å–∏–ª–∞ —Å–µ–≥–æ–¥–Ω—è.",
        "ü´∂ –ó–∞–±–æ—Ç–∞ –æ —Å–µ–±–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –º–∞–ª–µ–Ω—å–∫–∏—Ö —à–∞–≥–æ–≤.",
        "üí° –ù–µ –∑–∞–±—É–¥—å: —Ä–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å ‚Äî –∑–∞–ª–æ–≥ —ç—Ñ—Ñ–µ–∫—Ç–∞!"
    ]
    while True:
        async with reminder_states_lock:
            if chat_id not in reminder_states or reminder_states[chat_id].get('type') != 'tablets':
                break
                
        if chat_id in ping_blocked_until and datetime.datetime.now() < ping_blocked_until[chat_id]:
            await asyncio.sleep(60)
            continue
            
        try:
            message = random.choice(tablets_annoy_texts)
            keyboard = types.InlineKeyboardMarkup(
                inline_keyboard=[
                    [types.InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è–ª–∞", callback_data="confirm_tablets")]
                ]
            )
            await bot.send_message(chat_id, message, reply_markup=keyboard)
            if chat_id == TARGET_USER_ID:
                await bot.send_message(ADMIN_ID, f"(–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Ç–∞–±–ª–µ—Ç–∫–∞—Ö)")
            await asyncio.sleep(420)  # 7 minutes
        except Exception as e:
            logger.error(f"Error in tablet_annoy_loop: {e}")
            break

# Remove duplicate weather functions and add the correct ones
async def get_lyubertsy_weather_text():
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É –≤ –õ—é–±–µ—Ä—Ü–∞—Ö —á–µ—Ä–µ–∑ wttr.in"""
    url = "https://wttr.in/Lyubertsy?format=%l:+%c+%t&lang=ru"
    headers = {"User-Agent": "curl/7.64.1", "Accept-Language": "ru"}
    try:
        async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=5)) as session:
            try:
                async with session.get(url, headers=headers) as resp:
                    if resp.status != 200:
                        logger.error(f"wttr.in returned status: {resp.status}")
                        return "‚ö†Ô∏è –°–µ—Ä–≤–∏—Å –ø–æ–≥–æ–¥—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
                    weather_text = await resp.text()
            except asyncio.TimeoutError:
                logger.error("wttr.in request timed out")
                return "‚ö†Ô∏è –°–µ—Ä–≤–∏—Å –ø–æ–≥–æ–¥—ã –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç (—Ç–∞–π–º–∞—É—Ç)"
            except aiohttp.ClientError as e:
                logger.error(f"AIOHTTP error: {e}")
                return "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ —Å–µ—Ä–≤–∏—Å—É –ø–æ–≥–æ–¥—ã"
        result = (
            f"üå§Ô∏è {weather_text.strip()}\n"
            "–î–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã wttr.in"
        )
        return result
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã: {e}")
        return "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É –≤ –õ—é–±–µ—Ä—Ü–∞—Ö"

async def send_weather_to_user(message: types.Message, **kwargs):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–≥–æ–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    msg = await message.answer("‚è≥ –ü–æ–ª—É—á–∞—é –ø–æ–≥–æ–¥—É...")
    try:
        weather = await asyncio.wait_for(get_lyubertsy_weather_text(), timeout=7)
        await bot.send_message(TARGET_USER_ID, f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –º—É–∂–∞:\n{weather}")
        await msg.edit_text("‚úÖ –ü–æ–≥–æ–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
    except asyncio.TimeoutError:
        await msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É –∑–∞ 7 —Å–µ–∫—É–Ω–¥ (—Ç–∞–π–º–∞—É—Ç)")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–≥–æ–¥—ã: {e}")
        await msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–≥–æ–¥—É (–æ—à–∏–±–∫–∞)")

async def scheduled_weather():
    """Scheduled weather update for automatic sending"""
    try:
        weather = await get_lyubertsy_weather_text()
        await bot.send_message(TARGET_USER_ID, f"üåû –£—Ç—Ä–µ–Ω–Ω—è—è –ø–æ–≥–æ–¥–∞:\n{weather}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ø–æ–≥–æ–¥—ã: {e}")

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π ---
async def admin_help(message: types.Message, **kwargs):
    help_text = (
        "üõ†Ô∏è –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/test_water ‚Äî —Ç–µ—Å—Ç–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø—Ä–æ –≤–æ–¥—É\n"
        "/test_tablets ‚Äî —Ç–µ—Å—Ç–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø—Ä–æ —Ç–∞–±–ª–µ—Ç–∫–∏\n"
        "/test_mood ‚Äî —Ç–µ—Å—Ç–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø—Ä–æ —Ç—Ä–µ–∫–∏–Ω–≥ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è\n"
        "/test_tip ‚Äî —Ç–µ—Å—Ç–æ–≤—ã–π —Å–ª—É—á–∞–π–Ω—ã–π —Å–æ–≤–µ—Ç\n"
        "/send_water ‚Äî –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø—Ä–æ –≤–æ–¥—É –µ–π\n"
        "/send_tablets ‚Äî –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø—Ä–æ —Ç–∞–±–ª–µ—Ç–∫–∏ –µ–π\n"
        "/send_mood ‚Äî –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø—Ä–æ —Ç—Ä–µ–∫–∏–Ω–≥ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –µ–π\n"
        "/send_tip ‚Äî –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–≤–µ—Ç –µ–π\n"
        "/send_weather ‚Äî –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–≥–æ–¥—É –µ–π\n"  # –î–æ–±–∞–≤–ª–µ–Ω–æ
        "/say <—Ç–µ–∫—Å—Ç> ‚Äî –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ–π\n"
        "/clear_log ‚Äî –æ—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥ —Å–æ—Å—Ç–æ—è–Ω–∏–π\n"
        "/test_log ‚Äî –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å –≤ –ª–æ–≥\n"
        "/export_log ‚Äî –≤—ã–≥—Ä—É–∑–∏—Ç—å –ª–æ–≥\n"
        "/admin_help ‚Äî —ç—Ç–æ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥"
    )
    await message.answer(help_text)

async def main():
    try:
        print("[INFO] Bot starting...")
        logger.info("Starting bot...")
        
        # --- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤ ---
        print("[DEBUG] Registering handlers...")
        dp.message.register(start_handler, Command("start"))
        dp.message.register(admin_only(test_water), Command("test_water"))
        dp.message.register(admin_only(test_tablets), Command("test_tablets"))
        dp.message.register(admin_only(test_mood), Command("test_mood"))
        dp.message.register(admin_only(test_tip), Command("test_tip"))
        dp.message.register(admin_only(send_water), Command("send_water"))
        dp.message.register(admin_only(send_weather_to_user), Command("send_weather"))  # –î–æ–±–∞–≤–ª–µ–Ω–æ
        dp.message.register(admin_only(send_tablets), Command("send_tablets"))
        dp.message.register(admin_only(send_mood), Command("send_mood"))
        dp.message.register(admin_only(send_tip), Command("send_tip"))
        dp.message.register(admin_only(send_message), Command("say"))
        dp.message.register(admin_only(test_reminders), Command("test_remind"))
        dp.message.register(admin_only(clear_log), Command("clear_log"))
        dp.message.register(admin_only(test_log_entry), Command("test_log"))
        dp.message.register(admin_only(export_log), Command("export_log"))
        dp.message.register(admin_only(admin_help), Command("admin_help"))
        dp.message.register(disable_pings, Command(commands=["–æ—Ç—ä–µ–±–∏—Å—å", "off", "disable"]))  # –î–æ–±–∞–≤–ª–µ–Ω—ã –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        dp.message.register(process_input)  # fallback

        dp.callback_query.register(reminder_callback_handler, lambda c: c.data in ['confirm_water', 'confirm_posture'])
        dp.callback_query.register(confirm_tablets_callback, lambda c: c.data == 'confirm_tablets')
        dp.callback_query.register(confirm_water_callback, lambda c: c.data == 'confirm_water')
        dp.callback_query.register(mood_callback_handler, lambda c: c.data.startswith("mood_"))

        print("[DEBUG] Starting scheduler...")
        # --- –ò—Å–ø–æ–ª—å–∑—É–µ–º pytz –¥–ª—è —Ç–∞–π–º–∑–æ–Ω—ã –ú–æ—Å–∫–≤—ã ---
        moscow_tz = pytz.timezone("Europe/Moscow")

        # Schedule jobs
        print("[DEBUG] Scheduling jobs...")
        
        # –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        # –í–æ–¥–∞: –∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞ —Å 7:00 –¥–æ 23:00
        scheduler.add_job(send_water_reminder, 'cron', hour='7-23/2', args=[TARGET_USER_ID], timezone=moscow_tz)
        # –¢–∞–±–ª–µ—Ç–∫–∏: —Ç–æ–ª—å–∫–æ –¥–Ω–µ–≤–Ω—ã–µ (–ø—Ä–∏–º–µ—Ä: 9:30, 14:00, 23:00)
        scheduler.add_job(send_tablets_reminder, 'cron', hour=9, minute=30, args=[TARGET_USER_ID], timezone=moscow_tz)
        scheduler.add_job(send_tablets_reminder, 'cron', hour=14, minute=0, args=[TARGET_USER_ID], timezone=moscow_tz)
        scheduler.add_job(send_tablets_reminder, 'cron', hour=23, minute=0, args=[TARGET_USER_ID], timezone=moscow_tz)
        # –¢—Ä–µ–∫–∏–Ω–≥ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è: —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ 7:00 –∏ –¥–æ –ø–æ–ª—É–Ω–æ—á–∏ (–ø—Ä–∏–º–µ—Ä: 9:35 –∏ 21:05)
        scheduler.add_job(send_mood_reminder, 'cron', hour=9, minute=35, args=[TARGET_USER_ID], timezone=moscow_tz)
        scheduler.add_job(send_mood_reminder, 'cron', hour=21, minute=5, args=[TARGET_USER_ID], timezone=moscow_tz)
        # –°–æ–≤–µ—Ç—ã: –∫–∞–∂–¥—ã–µ 4 —á–∞—Å–∞ —Å 7:00 –¥–æ 23:00
        scheduler.add_job(periodic_tip, 'cron', hour='7-23/4', timezone=moscow_tz)
        # –ü–æ–≥–æ–¥–∞ –≤ –õ—é–±–µ—Ä—Ü–∞—Ö –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 7:30
        scheduler.add_job(scheduled_weather, 'cron', hour=7, minute=30, timezone=moscow_tz)

        # Start scheduler
        scheduler.start()
        print("[INFO] Scheduler started successfully")
        
        # Log scheduled jobs
        print("[INFO] Scheduled jobs:")
        for job in scheduler.get_jobs():
            print(f"  {job.id}: next run at {job.next_run_time}")

        # Start polling
        print("[INFO] Starting polling...")
        await dp.start_polling(bot, allowed_updates=["message", "callback_query"])
        
    except Exception as e:
        print(f"[CRITICAL] Fatal error in main(): {e}")
        logger.critical(f"Fatal error in main(): {e}", exc_info=True)
        raise
    finally:
        await shutdown(dp)

# --- Handler functions ---
async def mood_callback_handler(callback_query: types.CallbackQuery):
    try:
        # Parse callback data
        _, step, value = callback_query.data.split('_')
        step = int(step)
        value = int(value)
        chat_id = callback_query.message.chat.id

        # Initialize user data if needed
        if chat_id not in user_data:
            user_data[chat_id] = {'step': 0, 'entry': {}}

        # Save the value
        field_key, _ = mood_fields[step]
        user_data[chat_id]['entry'][field_key] = value
        user_data[chat_id]['step'] = step + 1

        # Notify admin about the response
        if chat_id == TARGET_USER_ID:
            await bot.send_message(ADMIN_ID, f"–û—Ç–≤–µ—Ç –Ω–∞ –æ–ø—Ä–æ—Å ({field_key}): {value}")

        # Update message to show the selected value
        await callback_query.message.edit_text(f"{mood_fields[step][1]}: {value}")

        # If not last step, ask next question
        if step + 1 < len(mood_fields):
            await ask_next_field_mood(chat_id)
        else:
            # –ù–ï —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–¥–µ—Å—å, —Ç–æ–ª—å–∫–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
            await bot.send_message(
                chat_id,
                "–•–æ—á–µ—à—å —á—Ç–æ-—Ç–æ –¥–æ–±–∞–≤–∏—Ç—å? –ù–∞–ø–∏—à–∏ —Å—é–¥–∞. –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å '-' –∏–ª–∏ '–Ω–µ—Ç'."
            )
            active_users.discard(chat_id)  # Remove from active users when done with questions

    except Exception as e:
        logger.error(f"Error in mood_callback_handler: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    finally:
        await callback_query.answer()

if __name__ == '__main__':
    try:
        print("[INFO] Starting bot...")
        asyncio.run(main())
    except KeyboardInterrupt:
        print("[INFO] Bot stopped by user")
        logger.info("Bot stopped by user")
    except Exception as e:
        print(f"[CRITICAL] Unexpected error: {e}")
        logger.critical(f"Unexpected error: {e}", exc_info=True)
    finally:
        print("[INFO] Bot shutdown complete")
        logger.info("Bot shutdown complete")
